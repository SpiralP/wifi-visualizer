use radiotap::Radiotap;

pub fn strip_radiotap(bytes: &[u8]) -> &[u8] {
  let (radiotap, rest) = Radiotap::parse(bytes).unwrap();
  // println!("{:#?}", element);

  let has_fcs = radiotap.flags.map(|flags| flags.fcs).unwrap_or(false);

  if has_fcs {
    // remove last 4 bytes (uint32_t)
    let (data, _fcs) = rest.split_at(rest.len() - 4);
    data
  } else {
    rest
  }
}

#[test]
fn test_strip_radiotap() {
  let frame_with_fcs = [
    0x00, 0x00, 0x38, 0x00, 0x2f, 0x40, 0x40, 0xa0, 0x20, 0x08, 0x00, 0xa0, 0x20, 0x08, 0x00, 0x00,
    0xbd, 0x20, 0x83, 0x26, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0c, 0x6c, 0x09, 0xc0, 0x00, 0xd5, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x83, 0x26, 0x00, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x11, 0x03, 0xd5, 0x00, 0xce, 0x01, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xb0, 0xee, 0x7b, 0x98, 0x3a, 0x79, 0xb0, 0xee, 0x7b, 0x98, 0x3a, 0x79, 0x60, 0x2d,
    0x3a, 0x80, 0xbe, 0x13, 0x35, 0x00, 0x00, 0x00, 0x64, 0x00, 0x11, 0x05, 0x00, 0x16, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x8c, 0x12, 0x98, 0x24, 0xb0, 0x48, 0x60, 0x6c, 0x03, 0x01,
    0x01, 0x05, 0x04, 0x01, 0x03, 0x00, 0x00, 0x07, 0x06, 0x55, 0x53, 0x20, 0x01, 0x0b, 0x1e, 0x20,
    0x01, 0x00, 0x23, 0x02, 0x12, 0x00, 0x2a, 0x01, 0x00, 0x2f, 0x01, 0x00, 0x30, 0x14, 0x01, 0x00,
    0x00, 0x0f, 0xac, 0x04, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x04, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x02,
    0x08, 0x00, 0x2d, 0x1a, 0xbc, 0x19, 0x16, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x16,
    0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0xdd, 0x09, 0x00, 0x10, 0x18, 0x02, 0x00, 0x00, 0x4c, 0x00, 0x00, 0xdd, 0x18, 0x00, 0x50, 0xf2,
    0x02, 0x01, 0x01, 0x80, 0x00, 0x03, 0xa4, 0x00, 0x00, 0x27, 0xa4, 0x00, 0x00, 0x42, 0x43, 0x5e,
    0x00, 0x62, 0x32, 0x2f, 0x00, 0xdd, 0x05, 0x00, 0x50, 0xf2, 0x05, 0x00, 0xdd, 0x52, 0x00, 0x50,
    0xf2, 0x04, 0x10, 0x4a, 0x00, 0x01, 0x10, 0x10, 0x44, 0x00, 0x01, 0x02, 0x10, 0x47, 0x00, 0x10,
    0x22, 0x21, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xb0, 0xee, 0x7b, 0x98, 0x3a, 0x79,
    0x10, 0x49, 0x00, 0x06, 0x00, 0x37, 0x2a, 0x00, 0x01, 0x20, 0x10, 0x54, 0x00, 0x08, 0x00, 0x06,
    0x00, 0x50, 0xf2, 0x04, 0x00, 0x01, 0x10, 0x11, 0x00, 0x16, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
    0x2d, 0x72, 0x6f, 0x6b, 0x75, 0x2d, 0x39, 0x35, 0x30, 0x2d, 0x41, 0x36, 0x39, 0x42, 0x33, 0x35,
    0xdd, 0x12, 0x50, 0x6f, 0x9a, 0x09, 0x02, 0x02, 0x00, 0x37, 0x2b, 0x03, 0x06, 0x00, 0xb2, 0xee,
    0x7b, 0x98, 0x3a, 0x77, 0xdd, 0x0d, 0x50, 0x6f, 0x9a, 0x0a, 0x00, 0x00, 0x06, 0x01, 0x11, 0x1c,
    0x44, 0x00, 0x96, 0x66, 0xaf, 0x6f, 0x76,
  ];

  let frame = strip_radiotap(&frame_with_fcs);
  assert_eq!(
    frame[0..4],
    [0x80, 0x00, 0x00, 0x00],
    "radiotap header not removed correctly"
  );

  assert_eq!(frame[frame.len() - 1], 0x96, "fcs at end not removed");
}
