mod error;
mod ieee802_11;

use self::error::*;
use self::ieee802_11::*;
use pcap;
use pcap::{Capture, Device, PacketHeader};

fn get_interface(maybe_search: Option<String>) -> Result<Device> {
  for interface in Device::list().unwrap() {
    match maybe_search {
      None => {
        return Ok(interface);
      }
      Some(ref search) => {
        if interface.name == *search {
          return Ok(interface);
        }
      }
    }
  }

  Err("No interface found".into())
}

fn start_capture(interface_name: Option<String>) -> Capture<pcap::Offline> {
  // let dev = get_interface(interface_name).unwrap();

  // println!("listening on {}", dev.name);

  Capture::from_file(r"D:\wpa\school\c1-02 (2).cap").unwrap()
  // .promisc(true)
  // .open()
  // .unwrap()
  // .immediate_mode(true)
}

struct PacketWithHeader {
  header: PacketHeader,
  data: Vec<u8>,
}

enum Status<T> {
  Active(T),
  Finished,
}

fn main() {
  let beacon = &[
    0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10,
    0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10, 0xd0, 0x00, 0x1e, 0x90, 0x39, 0xc7, 0x06, 0x02, 0x00, 0x00,
    0x66, 0x00, 0x21, 0x14, 0x00, 0x0e, 0x4d, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x61, 0x2d,
    0x57, 0x69, 0x46, 0x69, 0x01, 0x06, 0x18, 0xa4, 0x30, 0x48, 0x60, 0x6c, 0x03, 0x01, 0x01, 0x05,
    0x07, 0x00, 0x01, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x07, 0x06, 0x55, 0x53, 0x20, 0x01, 0x0b, 0x1e,
    0x0b, 0x05, 0x14, 0x00, 0x1f, 0x8d, 0x5b, 0x2a, 0x01, 0x00, 0x2d, 0x1a, 0xac, 0x19, 0x1b, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x16, 0x01, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x06,
    0x00, 0x10, 0x00, 0x00, 0x01, 0x40, 0x96, 0x06, 0x00, 0x40, 0x96, 0x00, 0x16, 0x00, 0xdd, 0x18,
    0x00, 0x50, 0xf2, 0x02, 0x01, 0x01, 0x80, 0x00, 0x03, 0xa4, 0x00, 0x00, 0x27, 0xa4, 0x00, 0x00,
    0x42, 0x43, 0x5e, 0x00, 0x62, 0x32, 0x2f, 0x00, 0xdd, 0x06, 0x00, 0x40, 0x96, 0x01, 0x01, 0x04,
    0xdd, 0x05, 0x00, 0x40, 0x96, 0x03, 0x05, 0xdd, 0x05, 0x00, 0x40, 0x96, 0x0b, 0x09, 0xdd, 0x05,
    0x00, 0x40, 0x96, 0x14, 0x00, 0xdd, 0x16, 0x00, 0x0b, 0x85, 0xf8, 0x00, 0x01, 0x5a, 0x26, 0x0c,
    0x1c, 0xf8, 0xc0, 0x9b, 0x07, 0x7f, 0xc3, 0x1b, 0xc7, 0x21, 0x64, 0x4e, 0xdb,
  ];

  println!("{:#?}", Frame::parse(beacon).unwrap());

  // use std::env;
  // let mut cap = start_capture(env::args().nth(1));

  // let (sender, receiver) = std::sync::mpsc::channel();

  // let work_thread = std::thread::spawn(move || loop {
  //   let status: Status<PacketWithHeader> = receiver.recv().unwrap();
  //   match status {
  //     Status::Active(packet) => {
  //       println!("{:#?}", packet.header);
  //     }
  //     Status::Finished => {
  //       break;
  //     }
  //   }
  // });

  // loop {
  //   match cap.next() {
  //     Err(err) => match err {
  //       pcap::Error::NoMorePackets => break,
  //       _ => {
  //         panic!("{}", err);
  //       }
  //     },
  //     Ok(packet) => {
  //       sender
  //         .send(Status::Active(PacketWithHeader {
  //           header: *packet.header,
  //           data: packet.data.to_vec(),
  //         }))
  //         .unwrap();
  //     }
  //   }
  // }

  // sender.send(Status::Finished).unwrap();
  // work_thread.join().unwrap()
}
