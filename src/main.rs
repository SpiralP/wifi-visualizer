mod error;
mod ieee802_11;

use self::error::*;
use self::ieee802_11::*;
use pcap;
use pcap::{Capture, Device, PacketHeader};
use ws::listen;

fn get_interface(maybe_search: Option<String>) -> Result<Device> {
  for interface in Device::list().unwrap() {
    match maybe_search {
      None => {
        return Ok(interface);
      }
      Some(ref search) => {
        if interface.name == *search {
          return Ok(interface);
        }
      }
    }
  }

  Err("No interface found".into())
}

fn start_capture(interface_name: Option<String>) -> Capture<pcap::Offline> {
  // let dev = get_interface(interface_name).unwrap();

  // println!("listening on {}", dev.name);

  Capture::from_file(r"D:\wpa\school\c1-02 (2).cap").unwrap()
  // .promisc(true)
  // .open()
  // .unwrap()
  // .immediate_mode(true)
}

struct PacketWithHeader {
  header: PacketHeader,
  data: Vec<u8>,
}

enum Status<T> {
  Active(T),
  Finished,
}

fn main() {
  let data_from_ds = [
    0x08, 0x02, 0x00, 0x00, 0x01, 0x00, 0x5e, 0x7f, 0xff, 0xfa, 0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10,
    0xa0, 0xa8, 0xcd, 0xe3, 0xc8, 0x85, 0x00, 0x08, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00,
    0x45, 0x00, 0x00, 0xa1, 0x51, 0x8a, 0x00, 0x00, 0x01, 0x11, 0x53, 0xeb, 0x0a, 0x08, 0x19, 0xd5,
    0xef, 0xff, 0xff, 0xfa, 0xf3, 0x29, 0x07, 0x6c, 0x00, 0x8d, 0x4a, 0x7d, 0x4d, 0x2d, 0x53, 0x45,
    0x41, 0x52, 0x43, 0x48, 0x20, 0x2a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d,
    0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x32, 0x33, 0x39, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x32, 0x35,
    0x35, 0x2e, 0x32, 0x35, 0x30, 0x3a, 0x31, 0x39, 0x30, 0x30, 0x0d, 0x0a, 0x53, 0x54, 0x3a, 0x75,
    0x72, 0x6e, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x75, 0x70, 0x6e, 0x70, 0x2d,
    0x6f, 0x72, 0x67, 0x3a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x49, 0x6e, 0x74, 0x65, 0x72,
    0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
    0x3a, 0x31, 0x0d, 0x0a, 0x4d, 0x61, 0x6e, 0x3a, 0x22, 0x73, 0x73, 0x64, 0x70, 0x3a, 0x64, 0x69,
    0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x4d, 0x58, 0x3a, 0x33, 0x0d, 0x0a, 0x0d,
    0x0a,
  ];

  let probe_response_retry = [
    0x50, 0x08, 0x2c, 0x00, 0x98, 0xd6, 0xf7, 0x8d, 0xc8, 0x50, 0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10,
    0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10, 0x50, 0xda, 0xbf, 0xad, 0x61, 0xc7, 0x06, 0x02, 0x00, 0x00,
    0x66, 0x00, 0x21, 0x14, 0x00, 0x0e, 0x4d, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x61, 0x2d,
    0x57, 0x69, 0x46, 0x69, 0x01, 0x06, 0x18, 0xa4, 0x30, 0x48, 0x60, 0x6c, 0x03, 0x01, 0x01, 0x07,
    0x06, 0x55, 0x53, 0x20, 0x01, 0x0b, 0x1e, 0x0b, 0x05, 0x14, 0x00, 0x26, 0x8d, 0x5b, 0x2a, 0x01,
    0x00, 0x2d, 0x1a, 0xac, 0x19, 0x1b, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x16, 0x01,
    0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x06, 0x00, 0x10, 0x00, 0x00, 0x01, 0x40, 0x96, 0x06, 0x00,
    0x40, 0x96, 0x00, 0x16, 0x00, 0xdd, 0x18, 0x00, 0x50, 0xf2, 0x02, 0x01, 0x01, 0x80, 0x00, 0x03,
    0xa4, 0x00, 0x00, 0x27, 0xa4, 0x00, 0x00, 0x42, 0x43, 0x5e, 0x00, 0x62, 0x32, 0x2f, 0x00, 0xdd,
    0x06, 0x00, 0x40, 0x96, 0x01, 0x01, 0x04, 0xdd, 0x05, 0x00, 0x40, 0x96, 0x03, 0x05, 0xdd, 0x05,
    0x00, 0x40, 0x96, 0x0b, 0x09, 0xdd, 0x05, 0x00, 0x40, 0x96, 0x14, 0x00, 0xdd, 0x16, 0x00, 0x0b,
    0x85, 0xf8, 0x00, 0x01, 0x5a, 0x26, 0x0c, 0x26, 0x85, 0xe5, 0x61, 0xfe, 0xe8, 0x9d, 0xf1, 0x7b,
    0x39, 0xa6, 0x3b, 0xb5,
  ];

  let beacon = [
    0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10,
    0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10, 0xd0, 0x00, 0x1e, 0x90, 0x39, 0xc7, 0x06, 0x02, 0x00, 0x00,
    0x66, 0x00, 0x21, 0x14, 0x00, 0x0e, 0x4d, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x61, 0x2d,
    0x57, 0x69, 0x46, 0x69, 0x01, 0x06, 0x18, 0xa4, 0x30, 0x48, 0x60, 0x6c, 0x03, 0x01, 0x01, 0x05,
    0x07, 0x00, 0x01, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x07, 0x06, 0x55, 0x53, 0x20, 0x01, 0x0b, 0x1e,
    0x0b, 0x05, 0x14, 0x00, 0x1f, 0x8d, 0x5b, 0x2a, 0x01, 0x00, 0x2d, 0x1a, 0xac, 0x19, 0x1b, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x16, 0x01, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x06,
    0x00, 0x10, 0x00, 0x00, 0x01, 0x40, 0x96, 0x06, 0x00, 0x40, 0x96, 0x00, 0x16, 0x00, 0xdd, 0x18,
    0x00, 0x50, 0xf2, 0x02, 0x01, 0x01, 0x80, 0x00, 0x03, 0xa4, 0x00, 0x00, 0x27, 0xa4, 0x00, 0x00,
    0x42, 0x43, 0x5e, 0x00, 0x62, 0x32, 0x2f, 0x00, 0xdd, 0x06, 0x00, 0x40, 0x96, 0x01, 0x01, 0x04,
    0xdd, 0x05, 0x00, 0x40, 0x96, 0x03, 0x05, 0xdd, 0x05, 0x00, 0x40, 0x96, 0x0b, 0x09, 0xdd, 0x05,
    0x00, 0x40, 0x96, 0x14, 0x00, 0xdd, 0x16, 0x00, 0x0b, 0x85, 0xf8, 0x00, 0x01, 0x5a, 0x26, 0x0c,
    0x1c, 0xf8, 0xc0, 0x9b, 0x07, 0x7f, 0xc3, 0x1b, 0xc7, 0x21, 0x64, 0x4e, 0xdb,
  ];

  // println!("{:#?}", Frame::parse(beacon).unwrap());
  // let serialized = serde_json::to_string(&Frame::parse(beacon).unwrap()).unwrap();
  // println!("{:#?}", serialized);

  // println!("{:#?}", Frame::parse(probe_response_retry).unwrap());
  // let serialized = serde_json::to_string(&Frame::parse(probe_response_retry).unwrap()).unwrap();
  // println!("{:#?}", serialized);

  // println!("{:#?}", Frame::parse(data_from_ds).unwrap());
  // let serialized = serde_json::to_string(&Frame::parse(data_from_ds).unwrap()).unwrap();
  // println!("{:#?}", serialized);

  listen("127.0.0.1:3012", |out| {
    // new connection

    move |msg: ws::Message| {
      // incoming message
      println!("incoming message {:#?}", msg);

      if msg.into_text().unwrap() == "test" {
        for frame in &[&beacon[..], &probe_response_retry[..], &data_from_ds[..]] {
          out
            .send(serde_json::to_string(&Frame::parse(frame).unwrap()).unwrap())
            .unwrap();
        }
      }

      out.close(ws::CloseCode::Normal)
    }
  })
  .unwrap();

  // use std::env;
  // let mut cap = start_capture(env::args().nth(1));

  // let (sender, receiver) = std::sync::mpsc::channel();

  // let work_thread = std::thread::spawn(move || loop {
  //   let status: Status<PacketWithHeader> = receiver.recv().unwrap();
  //   match status {
  //     Status::Active(packet) => {
  //       println!("{:#?}", packet.header);
  //     }
  //     Status::Finished => {
  //       break;
  //     }
  //   }
  // });

  // loop {
  //   match cap.next() {
  //     Err(err) => match err {
  //       pcap::Error::NoMorePackets => break,
  //       _ => {
  //         panic!("{}", err);
  //       }
  //     },
  //     Ok(packet) => {
  //       sender
  //         .send(Status::Active(PacketWithHeader {
  //           header: *packet.header,
  //           data: packet.data.to_vec(),
  //         }))
  //         .unwrap();
  //     }
  //   }
  // }

  // sender.send(Status::Finished).unwrap();
  // work_thread.join().unwrap()
}
