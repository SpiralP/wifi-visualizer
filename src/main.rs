mod error;
pub mod events;
pub mod ieee802_11;
mod pcap;

use self::events::*;
use self::ieee802_11::*;
use self::pcap::{start_file_capture, start_live_capture, PacketWithHeader, Status};
use ws::listen;

const DATA_FROM_DS: [u8; 193] = [
  0x08, 0x02, 0x00, 0x00, 0x01, 0x00, 0x5e, 0x7f, 0xff, 0xfa, 0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10,
  0xa0, 0xa8, 0xcd, 0xe3, 0xc8, 0x85, 0x00, 0x08, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00,
  0x45, 0x00, 0x00, 0xa1, 0x51, 0x8a, 0x00, 0x00, 0x01, 0x11, 0x53, 0xeb, 0x0a, 0x08, 0x19, 0xd5,
  0xef, 0xff, 0xff, 0xfa, 0xf3, 0x29, 0x07, 0x6c, 0x00, 0x8d, 0x4a, 0x7d, 0x4d, 0x2d, 0x53, 0x45,
  0x41, 0x52, 0x43, 0x48, 0x20, 0x2a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d,
  0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x32, 0x33, 0x39, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x32, 0x35,
  0x35, 0x2e, 0x32, 0x35, 0x30, 0x3a, 0x31, 0x39, 0x30, 0x30, 0x0d, 0x0a, 0x53, 0x54, 0x3a, 0x75,
  0x72, 0x6e, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x75, 0x70, 0x6e, 0x70, 0x2d,
  0x6f, 0x72, 0x67, 0x3a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x49, 0x6e, 0x74, 0x65, 0x72,
  0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
  0x3a, 0x31, 0x0d, 0x0a, 0x4d, 0x61, 0x6e, 0x3a, 0x22, 0x73, 0x73, 0x64, 0x70, 0x3a, 0x64, 0x69,
  0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x4d, 0x58, 0x3a, 0x33, 0x0d, 0x0a, 0x0d,
  0x0a,
];

const PROBE_RESPONSE_RETRY: [u8; 228] = [
  0x50, 0x08, 0x2c, 0x00, 0x98, 0xd6, 0xf7, 0x8d, 0xc8, 0x50, 0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10,
  0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10, 0x50, 0xda, 0xbf, 0xad, 0x61, 0xc7, 0x06, 0x02, 0x00, 0x00,
  0x66, 0x00, 0x21, 0x14, 0x00, 0x0e, 0x4d, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x61, 0x2d,
  0x57, 0x69, 0x46, 0x69, 0x01, 0x06, 0x18, 0xa4, 0x30, 0x48, 0x60, 0x6c, 0x03, 0x01, 0x01, 0x07,
  0x06, 0x55, 0x53, 0x20, 0x01, 0x0b, 0x1e, 0x0b, 0x05, 0x14, 0x00, 0x26, 0x8d, 0x5b, 0x2a, 0x01,
  0x00, 0x2d, 0x1a, 0xac, 0x19, 0x1b, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x16, 0x01,
  0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x06, 0x00, 0x10, 0x00, 0x00, 0x01, 0x40, 0x96, 0x06, 0x00,
  0x40, 0x96, 0x00, 0x16, 0x00, 0xdd, 0x18, 0x00, 0x50, 0xf2, 0x02, 0x01, 0x01, 0x80, 0x00, 0x03,
  0xa4, 0x00, 0x00, 0x27, 0xa4, 0x00, 0x00, 0x42, 0x43, 0x5e, 0x00, 0x62, 0x32, 0x2f, 0x00, 0xdd,
  0x06, 0x00, 0x40, 0x96, 0x01, 0x01, 0x04, 0xdd, 0x05, 0x00, 0x40, 0x96, 0x03, 0x05, 0xdd, 0x05,
  0x00, 0x40, 0x96, 0x0b, 0x09, 0xdd, 0x05, 0x00, 0x40, 0x96, 0x14, 0x00, 0xdd, 0x16, 0x00, 0x0b,
  0x85, 0xf8, 0x00, 0x01, 0x5a, 0x26, 0x0c, 0x26, 0x85, 0xe5, 0x61, 0xfe, 0xe8, 0x9d, 0xf1, 0x7b,
  0x39, 0xa6, 0x3b, 0xb5,
];

const BEACON: [u8; 237] = [
  0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10,
  0xe8, 0xed, 0xf3, 0x10, 0xa8, 0x10, 0xd0, 0x00, 0x1e, 0x90, 0x39, 0xc7, 0x06, 0x02, 0x00, 0x00,
  0x66, 0x00, 0x21, 0x14, 0x00, 0x0e, 0x4d, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x61, 0x2d,
  0x57, 0x69, 0x46, 0x69, 0x01, 0x06, 0x18, 0xa4, 0x30, 0x48, 0x60, 0x6c, 0x03, 0x01, 0x01, 0x05,
  0x07, 0x00, 0x01, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x07, 0x06, 0x55, 0x53, 0x20, 0x01, 0x0b, 0x1e,
  0x0b, 0x05, 0x14, 0x00, 0x1f, 0x8d, 0x5b, 0x2a, 0x01, 0x00, 0x2d, 0x1a, 0xac, 0x19, 0x1b, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x16, 0x01, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x06,
  0x00, 0x10, 0x00, 0x00, 0x01, 0x40, 0x96, 0x06, 0x00, 0x40, 0x96, 0x00, 0x16, 0x00, 0xdd, 0x18,
  0x00, 0x50, 0xf2, 0x02, 0x01, 0x01, 0x80, 0x00, 0x03, 0xa4, 0x00, 0x00, 0x27, 0xa4, 0x00, 0x00,
  0x42, 0x43, 0x5e, 0x00, 0x62, 0x32, 0x2f, 0x00, 0xdd, 0x06, 0x00, 0x40, 0x96, 0x01, 0x01, 0x04,
  0xdd, 0x05, 0x00, 0x40, 0x96, 0x03, 0x05, 0xdd, 0x05, 0x00, 0x40, 0x96, 0x0b, 0x09, 0xdd, 0x05,
  0x00, 0x40, 0x96, 0x14, 0x00, 0xdd, 0x16, 0x00, 0x0b, 0x85, 0xf8, 0x00, 0x01, 0x5a, 0x26, 0x0c,
  0x1c, 0xf8, 0xc0, 0x9b, 0x07, 0x7f, 0xc3, 0x1b, 0xc7, 0x21, 0x64, 0x4e, 0xdb,
];

fn main() {
  listen("127.0.0.1:3012", |out| {
    // new connection

    move |msg: ws::Message| {
      // incoming message
      println!("incoming message {:#?}", msg);

      match msg.into_text().unwrap().as_str() {
        "test" => {
          for frame in &[&BEACON[..], &PROBE_RESPONSE_RETRY[..], &DATA_FROM_DS[..]] {
            let parsed = Frame::parse(frame).unwrap();
            println!("{:#?}", parsed);

            let json = serde_json::to_string(&parsed).unwrap();
            println!("{:#?}", &json);
            out.send(json).unwrap();
          }
        }
        "file" => {
          let receiver = start_file_capture(r"./bap.cap").unwrap();

          let _work_thread = {
            let out = out.clone();
            std::thread::spawn(move || {
              // let mut last_time = 0;
              let mut store = {
                let out = out.clone();
                Store::new(Box::new(move |event| {
                  //
                  println!("{:#?}", event);
                  out.send(serde_json::to_string(&event).unwrap()).unwrap();
                }))
              };

              loop {
                let status = receiver.recv().unwrap();
                match status {
                  Status::Active(packet) => {
                    // println!("{:#?}", packet.header);

                    // let current_time = (packet.header.ts.tv_sec as u64) * 100_0000u64
                    //   + (packet.header.ts.tv_usec as u64);
                    // if last_time != 0 {
                    //   let diff = current_time.checked_sub(last_time).unwrap_or(0);
                    //   std::thread::sleep(std::time::Duration::from_micros(diff));
                    // }
                    // last_time = current_time;

                    let parsed_frame = Frame::parse(&packet.data).unwrap();

                    handle_frame(parsed_frame, &mut store);
                  }
                  Status::Finished => {
                    break;
                  }
                }
              }
              println!("close");
              out.close(ws::CloseCode::Normal).unwrap();
            })
          };

          // sniff_thread.join().unwrap();
          // work_thread.join().unwrap();

          return Ok(()); // don't close yet
        }

        "live" => {
          let receiver = start_live_capture(std::env::args().nth(1)).unwrap();

          let _work_thread = {
            let out = out.clone();
            std::thread::spawn(move || {
              // let mut last_time = 0;
              loop {
                let status: Status<PacketWithHeader> = receiver.recv().unwrap();
                match status {
                  Status::Active(packet) => {
                    // println!("{:#?}", packet.header);

                    // let current_time = (packet.header.ts.tv_sec as u64) * 100_0000u64
                    //   + (packet.header.ts.tv_usec as u64);
                    // if last_time != 0 {
                    //   let diff = current_time.checked_sub(last_time).unwrap_or(0);
                    //   std::thread::sleep(std::time::Duration::from_micros(diff));
                    // }
                    // last_time = current_time;

                    let parsed_frame = Frame::parse(&packet.data).unwrap();

                    if let Frame::Basic(ref frame) = parsed_frame {
                      if let FrameType::Control(ref _subtype) = frame.type_ {
                        continue;
                      }
                    }

                    out
                      .send(serde_json::to_string(&parsed_frame).unwrap())
                      .unwrap();
                  }
                  Status::Finished => {
                    break;
                  }
                }
              }
              println!("close");
              out.close(ws::CloseCode::Normal).unwrap();
            })
          };

          return Ok(()); // don't close yet
        }
        _ => {}
      }

      println!("close");
      out.close(ws::CloseCode::Normal)
    }
  })
  .unwrap();
}

#[test]
fn test_live_frame_parse() {
  let receiver = start_live_capture(None).unwrap();
  let status = receiver.recv().unwrap();
  if let Status::Active(packet) = status {
    let parsed_frame = Frame::parse(&packet.data).unwrap();
    println!("{:#?}", parsed_frame);
  } else {
    panic!("not Status::Active");
  }
}
